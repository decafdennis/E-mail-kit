<?php
// Developed by Dennis Stevense for Digital Deployment

/**
 * Implementation of hook_perm().
 */
function emailkit_perm() {
  $perm = array();

  $perm[] = 'administer e-mail kit';
  
  return $perm;
}

/**
 * Implementation of hook_menu().
 */
function emailkit_menu() {
  $items = array();

  $items['admin/emailkit'] = array(
    'title' => 'E-mail kit',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer e-mail kit'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  
  return $items;
}

/**
 * Implementation of hook_elements().
 */
function emailkit_elements() {
  $elements = array();
  
  $elements['emailkit_destination_select'] = array(
    '#input' => TRUE,
    '#process' => array('_emailkit_destination_select_process'),
    '#after_build' => array('_emailkit_destination_select_after_build'),
  );
  
  return $elements;
}

/**
 * Implementation of hook_theme().
 */
function emailkit_theme() {
  $theme = array();
  
  $theme['emailkit_destination_select'] = array(
    'arguments' => array(
      'element' => array(),
    ),
    'file' => 'emailkit.destination_select.inc',
  );
  $theme['emailkit_destination_select_children'] = array(
    'arguments' => array(
      'element' => array(),
    ),
    'file' => 'emailkit.destination_select.inc',
  );
  
  return $theme;
}

/**
 * Implementation of hook_emailkit_destination_info().
 */
function emailkit_emailkit_destination_info() {
  $info = array();
  
  // Generic destination type
  $info['emailkit_default'] = array(
    '#label' => t('Generic e-mail destination'),
  );
  
  // Single e-mail address destination type
  $info['emailkit_address'] = array(
    '#label' => t('E-mail address'),
    '#exposed' => TRUE,
    '#file' => 'emailkit.address.inc',
  );
  
  return $info;
}

/**
 * Implementation of emailkit_emailkit_dispatcher_info().
 */
function emailkit_emailkit_dispatcher_info() {
  $info = array();
  
  // Default message dispatcher, which services the default destination type
  $info['emailkit_default'] = array(
    '#label' => t('Drupal'),
    '#destinations' => array('emailkit_default'),
    '#file' => 'emailkit.default.inc',
  );
  
  // Dispatcher that services textual e-mail addresses, by forwarding them to the default message dispatcher
  $info['emailkit_address'] = array(
    '#label' => t('Readdress as generic e-mail destination'),
    '#destinations' => array('emailkit_address'),
    '#file' => 'emailkit.address.inc',
  );
  
  return $info;
}

/**
 * Returns information about all available destination types or about the given type.
 *
 * @param $type The name of the destination type to return information about, or NULL to return information about all destination types.
 *
 * @return If a type was given, a structured destination type array or NULL if no such destination exists. Otherwise, an array of destination type information keyed by destination type name.
 */
function emailkit_destination_info($type = NULL, $reset = FALSE) {
  return _emailkit_entity_info('destination', $type, $reset);
}

/**
 * Private function used by _emailkit_entity_info that provides default values for destination types.
 */
function _emailkit_destination_info_defaults() {
  return array(
    '#label' => t('(Unlabeled)'),
    '#exposed' => FALSE,
  );
}

/**
 * Returns the form for the given exposed destination type.
 *
 * @param $type A string indicating the name of the destination type.
 *
 * @return A form array, or NULL if the destination type has no form or is not exposed.
 */
function emailkit_destination_form($type) {
  if (!isset($type)) {
    return NULL;
  }
  
  // Get information about the destination type
  $info = emailkit_destination_info($type);
  if (!isset($info)) {
    return NULL;
  }
  
  // Determine whether the destination type is exposed
  if (!$info['#exposed']) {
    return NULL;
  }
  
  // Get the destination type form
  if ($destination_form = _emailkit_entity_info_hook($info, 'destination_form')) {
    $form = $destination_form($type);
  }
  else {
    $form = NULL;
  }

  // If we have a form, adapt a few of its properties
  if (isset($form)) {
    // Set #destination_type if it hasn't been set already
    if (!isset($form['#destination_type'])) {
      $form['#destination_type'] = $type;
    }
    
    // Install the default validation handler if it hasn't been set already
    if (!isset($form['#element_validate'])) {
      if ($function = _emailkit_entity_info_hook($info, 'destination_form_validate')) {
        $form['#element_validate'] = array($function);
      }
    }
  }
  
  return $form;
}

/**
 * Returns the name of the dispatcher that services the destination type with the given name.
 *
 * @param $type The destination type to find a dispatcher for.
 *
 * @return The name of a dispatcher.
 */
function emailkit_destination_dispatcher($type) {
  if (!isset($type)) {
    return NULL;
  }
  
  $result = NULL;
  
  // Find the first dispatcher that services this destination
  // TODO: Allow the user to configure the dispatcher if there is more than one for a destination
  $dispatchers = emailkit_dispatcher_info();
  foreach ($dispatchers as $dispatcher_name => $dispatcher_info) {
    if (in_array($type, $dispatcher_info['#destinations'])) {
      $result = $dispatcher_name;
      break;
    }
  }
  
  return $result;
}

/**
 * Returns information about all available dispatchers or just about the given dispatcher.
 *
 * @param $name The name of the dispatcher to return information about, or NULL to return information about all dispatcher.
 *
 * @return If a name was given, a structured dispatcher array or NULL if no such dispatcher exists. Otherwise, an array of dispatcher information keyed by dispatcher name.
 */
function emailkit_dispatcher_info($name = NULL, $reset = FALSE) {
  return _emailkit_entity_info('dispatcher', $name, $reset);
}

/**
 * Private function used by _emailkit_entity_info that provides default values for dispatchers.
 */
function _emailkit_dispatcher_info_defaults() {
  return array(
    '#label' => t('(Unlabeled)'),
    '#destinations' => array(),
  );
}

/**
 * Sends the given message to the given destination.
 *
 * @param $message A structured message array.
 * @param $destination A structured destination array, that must have at least its #type set.
 *
 * @return A flag indicating whether sending was successful.
 */
function emailkit_send($message, $destination) {
  if (!is_array($message)) {
    trigger_error(sprintf('Message is not an array.'), E_USER_ERROR);
    return FALSE;
  }
  
  if (!is_array($destination) || !isset($destination['#type'])) {
    trigger_error(sprintf('Destination is not an array or does not have a #type.'), E_USER_ERROR);
    return FALSE;
  }
  
  // Find a dispatcher for this destination
  $dispatcher_name = emailkit_destination_dispatcher($destination['#type']);
  if (!isset($dispatcher_name)) {
    return FALSE;
  }
  
  // Find the send function for that dispatcher
  $dispatcher_send = _emailkit_entity_identifier_hook('dispatcher', $dispatcher_name, 'dispatcher_send');
  if (!isset($dispatcher_send)) {
    return FALSE;
  }

  return $dispatcher_send($dispatcher_name, $message, $destination);
}

/**
 * Sends the given message to the destination given by the emailkit_destination_select element value.
 *
 * @param $element_value The value of an emailkit_destination_select element.
 */
function emailkit_destination_select_send($message, $element_value) {
  // Check whether we have a destination type
  if (!isset($element_value['destination_type'])) {
    return FALSE;
  }  
  $destination_type = $element_value['destination_type'];
  
  // Start constructing a structured destination array
  $destination = array(
    '#type' => $destination_type,
  );

  // Allow the destination_form_submit hook to dress up the structured destination array
  $form_values = isset($element_value['destination_form'][$destination_type]) ? $element_value['destination_form'][$destination_type] : array();
  if ($destination_form_submit = _emailkit_entity_identifier_hook('destination', $destination_type, 'destination_form_submit')) {
    $destination_form_submit(&$destination, $form_values);
  }
  
  // Finally, pass the stick to emailkit_send
  return emailkit_send($message, $destination);
}

/**
 * Private function that invokes the info hooks, caches the results and returns the requested information.
 *
 * @param $domain The domain from which to return information. Currently valid domains are 'destination' and 'dispatcher'.
 * @param $identifier The identifier of the entity to return information about, or NULL to return information about all entities. Defaults to NULL.
 * @param $reset A flag indicating whether to reset the cache and call the info hooks again. Defaults to FALSE.
 */
function _emailkit_entity_info($domain, $identifier = NULL, $reset = FALSE) {
  assert('in_array($domain, array(\'destination\', \'dispatcher\')) /* should be a recognized domain */');
  
  static $info = NULL;

  // Check whether we need to (re)load the cached information
  if (!isset($info[$domain]) || $reset) {
    $info[$domain] = array();

    // Determine domain-specific entity defaults
    $defaults_function = '_emailkit_' . $domain . '_info_defaults';
    if (function_exists($defaults_function)) {
      $defaults = call_user_func($defaults_function);
    }
    else {
      $defaults = array();
    }
    
    // Invoke hook_emailkit_DOMAIN_info() on all modules that implement it
    $hook = 'emailkit_' . $domain . '_info';
    foreach (module_implements($hook) as $module) {
      $module_info = module_invoke($module, $hook);

      foreach ($module_info as $entity_identifier => $entity_info) {
        // Add the domain-specific entity defaults as well as the general defaults
        $entity_info += $defaults + array(
          '#file' => NULL,
          '#base' => $entity_identifier,
        );
        
        // Make sure to unset this if it was returned from the hook, to be safe
        unset($entity_info['#_include']);

        // Determine the full path to the include file, if necessary
        if (isset($entity_info['#file'])) {
          $module_path = drupal_get_path('module', $module);
          $include_path = $module_path . '/' . $entity_info['#file'];
          
          // Only allow the file to be inside the module directory, to be safe
          if (file_check_location($include_path, $module_path)) {
            $entity_info['#_include'] = $include_path;
          }
        }
        
        $info[$domain][$entity_identifier] = $entity_info;
      }
    }
  }

  // Return information about a specific entity or about all identities, depending on whether an identifier was given
  if (isset($identifier)) {
    if (isset($info[$domain][$identifier])) {
      return $info[$domain][$identifier];
    }
    else {
      return NULL;
    }
  }
  else {
    return $info[$domain];
  }
}

/**
 * Private function that returns the name of the function that implements the given hook.
 *
 * @param $domain The domain from which to return information.
 * @param $identifier The identifier of the entity to return information about.
 * @param $hook The name of the hook to return information about.
 * @param $check Whether to check the existence of the function. NULL will be returned if the function does not exist. Defaults to TRUE.
 *
 * @return The name of the function that implements the hook or NULL.
 */
function _emailkit_entity_identifier_hook($domain, $identifier, $hook, $check = TRUE) {
  assert('isset($identifier) /* expected $identifier that is non-NULL */');
  
  return _emailkit_entity_info_hook(_emailkit_entity_info($domain, $identifier), $hook, $check);
}

/**
 * Private function that returns the name of the function that implements the given hook.
 *
 * @param $entity_info A structured entity array containing at least the #base key.
 * @param $hook The name of the hook to return information about.
 * @param $check Whether to check the existence of the function. NULL will be returned if the function does not exist. Defaults to TRUE.
 *
 * @return The name of the function that implements the hook or NULL.
 */
function _emailkit_entity_info_hook($entity_info, $hook, $check = TRUE) {
  assert('is_array($entity_info) /* expected $entity_info that is non-NULL and is an array */');
  assert('is_string($hook) /* expected $hook that is non-NULL and is a string */');
  
  // Load the include file, if necessary
  if ($check && isset($entity_info['#_include'])) {
    require_once($entity_info['#_include']);
  }
  
  // Return the function name, if it exists or if checking is disabled
  $function = $entity_info['#base'] . '_' . $hook;
  if (!$check || function_exists($function)) {
    return $function;
  }
  else {
    return NULL;
  }
}

/**
 * Private helper function that will include the appropriate file and pass on the message.
 */
function _emailkit_destination_select_process($element) {
  module_load_include('inc', 'emailkit', 'emailkit.destination_select');
  
  return emailkit_destination_select_process($element);
}

/**
 * Private helper function that will include the appropriate file and pass on the message.
 */
function _emailkit_destination_select_after_build($element) {
  module_load_include('inc', 'emailkit', 'emailkit.destination_select');
  
  return emailkit_destination_select_after_build($element);
}

/**
 * Private helper function that marks the given element and all its children as having been validated.
 */
function _emailkit_element_set_validated(&$element) {
  $element['#validated'] = TRUE;
  
  // Recurse
  foreach (element_children($element) as $key) {
    _emailkit_element_set_validated($element[$key]);
  }
}
