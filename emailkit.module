<?php
// Developed by Dennis Stevense for Digital Deployment

/**
 * Implementation of hook_perm().
 */
function emailkit_perm() {
  $perm = array();

  $perm[] = 'administer e-mail kit';
  
  return $perm;
}

/**
 * Implementation of hook_menu().
 */
function emailkit_menu() {
  $items = array();

  $items['admin/emailkit'] = array(
    'title' => 'E-mail kit',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer e-mail kit'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/emailkit/settings'] = array(
    'title' => 'Settings',
    'description' => 'Control general e-mail sending behavior.',
    'page callback' => 'emailkit_admin_settings',
    'access arguments' => array('administer e-mail kit'),
    'file' => 'emailkit.admin.inc',
  );
  
  return $items;
}

/**
 * Implementation of hook_elements().
 */
function emailkit_elements() {
  $elements = array();
  
  $elements['emailkit_destination_select'] = array(
    '#input' => TRUE,
    '#process' => array('_emailkit_destination_select_process'),
    '#after_build' => array('_emailkit_destination_select_after_build'),
  );
  
  return $elements;
}

/**
 * Implementation of hook_theme().
 */
function emailkit_theme() {
  $theme = array();
  
  $theme['emailkit_destination_select'] = array(
    'arguments' => array(
      'element' => array(),
    ),
    'file' => 'emailkit.destination_select.inc',
  );
  $theme['emailkit_destination_select_children'] = array(
    'arguments' => array(
      'element' => array(),
    ),
    'file' => 'emailkit.destination_select.inc',
  );
  
  return $theme;
}

/**
 * Implementation of hook_emailkit_destination_info().
 */
function emailkit_emailkit_destination_info() {
  $info = array();
  
  // Generic destination type
  $info['emailkit_default'] = array(
    '#label' => t('Generic e-mail destination'),
  );
  
  // Single e-mail address destination type
  $info['emailkit_address'] = array(
    '#label' => t('E-mail address'),
    '#exposed' => TRUE,
    '#file' => 'emailkit.address.inc',
  );
  
  return $info;
}

/**
 * Implementation of emailkit_emailkit_dispatcher_info().
 */
function emailkit_emailkit_dispatcher_info() {
  $info = array();
  
  // Default message dispatcher, which services the default destination type
  $info['emailkit_default'] = array(
    '#label' => t('Drupal (default)'),
    '#destinations' => array('emailkit_default'),
    '#file' => 'emailkit.default.inc',
  );
  
  // Dispatcher that services textual e-mail addresses, by forwarding them to the default message dispatcher
  $info['emailkit_address'] = array(
    '#label' => t('Readdress as a generic e-mail destination (default)'),
    '#destinations' => array('emailkit_address'),
    '#file' => 'emailkit.address.inc',
  );
  
  return $info;
}

/**
 * Returns information about all available destination types or about the given type.
 *
 * @param $type The name of the destination type to return information about, or NULL to return information about all destination types.
 *
 * @return If a type was given, a structured destination type array or NULL if no such destination exists. Otherwise, an array of destination type information keyed by destination type name.
 */
function emailkit_destination_info($type = NULL, $reset = FALSE) {
  module_load_include('inc', 'emailkit', 'emailkit');
  
  return _emailkit_entity_info('destination', $type, $reset);
}

/**
 * Private function used by _emailkit_entity_info that provides default values for destination types.
 */
function _emailkit_destination_info_defaults() {
  return array(
    '#label' => t('(Unlabeled)'),
    '#exposed' => FALSE,
  );
}

/**
 * Returns the form for the given exposed destination type.
 *
 * @param $type A string indicating the name of the destination type.
 *
 * @return A form array, or NULL if the destination type has no form or is not exposed.
 */
function emailkit_destination_form($type) {
  if (!isset($type)) {
    return NULL;
  }
  
  // Get information about the destination type
  $info = emailkit_destination_info($type);
  if (!isset($info)) {
    return NULL;
  }
  
  // Determine whether the destination type is exposed
  if (!$info['#exposed']) {
    return NULL;
  }
  
  module_load_include('inc', 'emailkit', 'emailkit');
  
  // Get the destination type form
  if ($destination_form = _emailkit_entity_info_hook($info, 'destination_form')) {
    $form = $destination_form($type);
  }
  else {
    $form = NULL;
  }

  // If we have a form, adapt a few of its properties
  if (isset($form)) {
    // Set #destination_type if it hasn't been set already
    if (!isset($form['#destination_type'])) {
      $form['#destination_type'] = $type;
    }
    
    // Install the default validation handler if it hasn't been set already
    if (!isset($form['#element_validate'])) {
      if ($function = _emailkit_entity_info_hook($info, 'destination_form_validate')) {
        $form['#element_validate'] = array($function);
      }
    }
  }
  
  return $form;
}

/**
 * Returns the name of the dispatcher that services the destination type with the given name.
 *
 * @param $type The destination type to find a dispatcher for.
 *
 * @return The name of a dispatcher.
 */
function emailkit_destination_dispatcher($type) {
  if (!isset($type)) {
    return NULL;
  }

  // Find all dispatchers that service this destination
  $potential_dispatcher_names = array();
  $dispatchers = emailkit_dispatcher_info();
  foreach ($dispatchers as $dispatcher_name => $dispatcher_info) {
    if (in_array($type, $dispatcher_info['#destinations'])) {
      $potential_dispatcher_names[] = $dispatcher_name;
    }
  }
  
  if (empty($potential_dispatcher_names)) {
    return NULL;
  }
  
  // Check if we have a configured dispatcher
  $configured_dispatcher_name = variable_get('emailkit_destination_dispatcher_' . $type, NULL);

  // If the configured dispatcher is sound, return it
  if (isset($configured_dispatcher_name) && in_array($configured_dispatcher_name, $potential_dispatcher_names)) {
    return $configured_dispatcher_name;
  }
  // Otherwise, return the first dispatcher we found
  else {
    return array_shift($potential_dispatcher_names);
  }
}

/**
 * Returns information about all available dispatchers or just about the given dispatcher.
 *
 * @param $name The name of the dispatcher to return information about, or NULL to return information about all dispatcher.
 *
 * @return If a name was given, a structured dispatcher array or NULL if no such dispatcher exists. Otherwise, an array of dispatcher information keyed by dispatcher name.
 */
function emailkit_dispatcher_info($name = NULL, $reset = FALSE) {
  module_load_include('inc', 'emailkit', 'emailkit');
  
  return _emailkit_entity_info('dispatcher', $name, $reset);
}

/**
 * Private function used by _emailkit_entity_info that provides default values for dispatchers.
 */
function _emailkit_dispatcher_info_defaults() {
  return array(
    '#label' => t('(Unlabeled)'),
    '#destinations' => array(),
  );
}

/**
 * Returns information about all available message types or just about the given message type.
 *
 * @param $id The id of the message type to return information about, or NULL to return information about all message types.
 *
 * @return If an id was given, a structured message type array or NULL if no such message type exists. Otherwise, an array of message type information keyed by message id.
 */
function emailkit_message_info($id = NULL, $reset = FALSE) {
  module_load_include('inc', 'emailkit', 'emailkit');
  
  return _emailkit_entity_info('message', $id, $reset);
}

/**
 * Private function used by _emailkit_entity_info that provides default values for message types.
 */
function _emailkit_message_info_defaults() {
  return array(
    '#label' => t('(Unlabeled)'),
  );
}

/**
 * Returns a structured message array for the given message id.
 *
 * @param $message_id The message id.
 * @param ... Any additional arguments that will be passed into hook_message().
 *
 * @return A structured message array.
 */
function emailkit_message($message_id) {
  if (!isset($message_id)) {
    return NULL;
  }
  
  // Get information about the message type
  $info = emailkit_message_info($message_id);
  if (!isset($info)) {
    return NULL;
  }
    
  module_load_include('inc', 'emailkit', 'emailkit');
  
  // Get the message
  $function = _emailkit_entity_info_hook($info, 'message');
  $args = func_get_args();
  $message = call_user_func_array($function, $args);

  // If we have a message, adapt a few of its properties
  if (isset($message)) {
    // Set #message_id if it hasn't been set already
    if (!isset($form['#message_id'])) {
      $message['#message_id'] = $message_id;
    }
  }
  
  return $message;
}

/**
 * Sends the given message to the given destination.
 *
 * @param $message A structured message array.
 * @param $destination A structured destination array, that must have at least its #type set.
 *
 * @return A flag indicating whether sending was successful.
 */
function emailkit_send($message, $destination) {
  if (!is_array($message)) {
    trigger_error(sprintf('Message is not an array.'), E_USER_ERROR);
    return FALSE;
  }
  
  if (!is_array($destination) || !isset($destination['#type'])) {
    trigger_error(sprintf('Destination is not an array or does not have a #type.'), E_USER_ERROR);
    return FALSE;
  }
  
  // Find a dispatcher for this destination
  $dispatcher_name = emailkit_destination_dispatcher($destination['#type']);
  if (!isset($dispatcher_name)) {
    return FALSE;
  }
  
  module_load_include('inc', 'emailkit', 'emailkit');
  
  // Find the send function for that dispatcher
  $dispatcher_send = _emailkit_entity_identifier_hook('dispatcher', $dispatcher_name, 'dispatcher_send');
  if (!isset($dispatcher_send)) {
    return FALSE;
  }

  return $dispatcher_send($dispatcher_name, $message, $destination);
}

/**
 * Sends the given message to the destination given by the emailkit_destination_select element value.
 *
 * @param $element_value The value of an emailkit_destination_select element.
 */
function emailkit_destination_select_send($message, $element_value) {
  // Check whether we have a destination type
  if (!isset($element_value['destination_type'])) {
    return FALSE;
  }  
  $destination_type = $element_value['destination_type'];
  
  module_load_include('inc', 'emailkit', 'emailkit');
  
  // Start constructing a structured destination array
  $destination = array(
    '#type' => $destination_type,
  );

  // Allow the destination_form_submit hook to dress up the structured destination array
  $form_values = isset($element_value['destination_form'][$destination_type]) ? $element_value['destination_form'][$destination_type] : array();
  if ($destination_form_submit = _emailkit_entity_identifier_hook('destination', $destination_type, 'destination_form_submit')) {
    $destination_form_submit(&$destination, $form_values);
  }
  
  // Finally, pass the stick to emailkit_send
  return emailkit_send($message, $destination);
}

/**
 * Private helper function that will include the appropriate file and pass on the message.
 */
function _emailkit_destination_select_process($element) {
  module_load_include('inc', 'emailkit', 'emailkit.destination_select');
  
  return emailkit_destination_select_process($element);
}

/**
 * Private helper function that will include the appropriate file and pass on the message.
 */
function _emailkit_destination_select_after_build($element) {
  module_load_include('inc', 'emailkit', 'emailkit.destination_select');
  
  return emailkit_destination_select_after_build($element);
}

/**
 * Private helper function that marks the given element and all its children as having been validated.
 */
function _emailkit_element_set_validated(&$element) {
  $element['#validated'] = TRUE;
  
  // Recurse
  foreach (element_children($element) as $key) {
    _emailkit_element_set_validated($element[$key]);
  }
}
