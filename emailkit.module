<?php
// Developed by Dennis Stevense for Digital Deployment

/**
 * Defines the format with content type text/html; charset=utf-8.
 */
define('EMAILKIT_MESSAGE_FORMAT_HTML', 0);

/**
 * Defines the format with content type text/plain; charset=utf-8; format=flowed; delsp=yes.
 */
define('EMAILKIT_MESSAGE_FORMAT_TEXT', 1);

/**
 * The length of a unique message token. This is the length of a hexadecimal MD5 hash.
 */
define('EMAILKIT_MESSAGE_TOKEN_LENGTH', 32);

/**
 * Implementation of hook_perm().
 */
function emailkit_perm() {
  $perm = array();

  $perm[] = 'administer e-mail kit';
  
  return $perm;
}

/**
 * Implementation of hook_menu().
 */
function emailkit_menu() {
  $items = array();

  // Root page for all pages related to emailkit
  $items['admin/emailkit'] = array(
    'title' => 'E-mail kit',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer e-mail kit'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // General settings page
  $items['admin/emailkit/settings'] = array(
    'title' => 'Settings',
    'description' => 'Control the general behavior of E-mail kit.',
    'page callback' => 'emailkit_admin_settings',
    'access arguments' => array('administer e-mail kit'),
    'file' => 'emailkit.admin.inc',
  );

  // Pages for customizing message types
  $items['admin/emailkit/messages'] = array(
    'title' => 'Messages',
    'description' => 'Control the behavior of different kinds of messages.',
    'page callback' => 'emailkit_admin_message_type_list',
    'access arguments' => array('administer e-mail kit'),
    'file' => 'emailkit.admin.inc',
  );
  $items['admin/emailkit/messages/%emailkit_message_type/edit'] = array(
    'title callback' => 'emailkit_message_type_title',
    'title arguments' => array(3),
    'page callback' => 'emailkit_admin_message_type_edit',
    'page arguments' => array(3),
    'access arguments' => array('administer e-mail kit'),
    'file' => 'emailkit.admin.inc',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Menu item placeholder callback.
 */
function emailkit_message_type_load($message_id) {
  return emailkit_message_info($message_id);
}

/**
 * Menu item title callback.
 */
function emailkit_message_type_title($message_type) {
  return $message_type['#label'];
}

/**
 * Implementation of hook_help().
 */
function emailkit_help($path, $arg) {
  switch ($path) {
    case 'admin/emailkit/messages':
      return t('<p>Below is a list of different kinds of e-mail messages that are sent from the site. You can configure each type of message to suit your needs.</p>');
  }
}

/**
 * Implementation of hook_elements().
 */
function emailkit_elements() {
  $elements = array();

  // Form element that can be used to specify a destination by selecting and configuring one of the exposed destination types
  $elements['emailkit_destination_select'] = array(
    '#input' => TRUE,
    '#process' => array('_emailkit_destination_select_process'),
    '#after_build' => array('_emailkit_destination_select_after_build'),
  );
  
  return $elements;
}

/**
 * Implementation of hook_theme().
 */
function emailkit_theme() {
  $theme = array();

  $theme['emailkit_message'] = array(
    'arguments' => array('message' => array()),
    'template' => 'emailkit-message',
  );
  
  $theme['emailkit_destination_select'] = array(
    'arguments' => array('element' => array()),
    'file' => 'emailkit.destination_select.inc',
  );
  $theme['emailkit_destination_select_children'] = array(
    'arguments' => array('element' => array()),
    'file' => 'emailkit.destination_select.inc',
  );
  
  $theme['emailkit_admin_message_type_list'] = array(
    'arguments' => array('message_types' => array()),
    'file' => 'emailkit.admin.inc',
  );
  
  return $theme;
}

/**
 * Implementation of hook_emailkit_destination_info().
 */
function emailkit_emailkit_destination_info() {
  $info = array();
  
  // Generic destination type
  $info['emailkit_default'] = array(
    '#label' => t('Generic e-mail destination'),
    '#default_dispatcher' => 'emailkit_default',
  );
  
  // Internet Message Format (RFC 2822) Address Specification destination type
  $info['emailkit_imf'] = array(
    '#label' => t('Internet Message Format address specification'),
    '#default_dispatcher' => 'emailkit_default',
  );
  
  // Single e-mail address destination type
  $info['emailkit_address'] = array(
    '#label' => t('E-mail address'),
    '#exposed' => TRUE,
    '#default_dispatcher' => 'emailkit_address',
    '#file' => 'emailkit.address.inc',
  );
  
  return $info;
}

/**
 * Implementation of emailkit_emailkit_dispatcher_info().
 */
function emailkit_emailkit_dispatcher_info() {
  $info = array();
  
  // Default message dispatcher, which services the default and IMF destination types
  $info['emailkit_default'] = array(
    '#label' => t('PHP'),
    '#destinations' => array('emailkit_default', 'emailkit_imf'),
    '#file' => 'emailkit.inc',
  );
  
  // Dispatcher that services textual e-mail addresses, by forwarding them to the default message dispatcher
  $info['emailkit_address'] = array(
    '#label' => t('Readdress as a generic e-mail destination'),
    '#destinations' => array('emailkit_address'),
    '#file' => 'emailkit.address.inc',
  );
  
  return $info;
}

/**
 * Implementation of hook_emailkit_message_info().
 */
function emailkit_emailkit_message_info() {
  $info = array();

  // Message identifier used for messages coming in through drupal_mail_wrapper()
  $info['emailkit_drupal'] = array(
    '#label' => t('Drupal'),
    '#file' => 'emailkit.drupal.inc',
  );

  return $info;
}

/**
 * Returns information about all available destination types or about the given type.
 *
 * @param $type The name of the destination type to return information about, or NULL to return information about all destination types.
 *
 * @return If a type was given, a structured destination type array or NULL if no such destination exists. Otherwise, an array of destination type information keyed by destination type name.
 */
function emailkit_destination_info($type = NULL, $reset = FALSE) {
  module_load_include('inc', 'emailkit', 'emailkit');
  
  return _emailkit_entity_info('destination', $type, $reset);
}

/**
 * Private function used by _emailkit_entity_info that provides default values for destination types.
 */
function _emailkit_destination_domain_info() {
  return array(
    '#identifier' => '#type',
    '#defaults' => array(
      '#label' => t('(Unlabeled)'),
      '#exposed' => FALSE,
    ),
  );
}

/**
 * Returns the form for the given exposed destination type.
 *
 * @param $type A string indicating the name of the destination type.
 *
 * @return A form array, or NULL if the destination type has no form or is not exposed.
 */
function emailkit_destination_form($type) {
  if (!isset($type)) {
    return NULL;
  }
  
  // Get information about the destination type
  $info = emailkit_destination_info($type);
  if (!isset($info)) {
    return NULL;
  }
  
  // Determine whether the destination type is exposed
  if (!$info['#exposed']) {
    return NULL;
  }
  
  module_load_include('inc', 'emailkit', 'emailkit');
  
  // Get the destination type form
  if ($destination_form = _emailkit_entity_info_hook($info, 'destination_form')) {
    $form = $destination_form($type);
  }
  else {
    $form = NULL;
  }

  // If we have a form, adapt a few of its properties
  if (isset($form)) {
    // Set #destination_type if it hasn't been set already
    if (!isset($form['#destination_type'])) {
      $form['#destination_type'] = $type;
    }
    
    // Install the default validation handler if it hasn't been set already
    if (!isset($form['#element_validate'])) {
      if ($function = _emailkit_entity_info_hook($info, 'destination_form_validate')) {
        $form['#element_validate'] = array($function);
      }
    }
  }
  
  return $form;
}

/**
 * Returns information about all available dispatchers or just about the given dispatcher.
 *
 * @param $name The name of the dispatcher to return information about, or NULL to return information about all dispatcher.
 *
 * @return If a name was given, a structured dispatcher array or NULL if no such dispatcher exists. Otherwise, an array of dispatcher information keyed by dispatcher name.
 */
function emailkit_dispatcher_info($name = NULL, $reset = FALSE) {
  module_load_include('inc', 'emailkit', 'emailkit');
  
  return _emailkit_entity_info('dispatcher', $name, $reset);
}

/**
 * Private function used by _emailkit_entity_info that provides default values for dispatchers.
 */
function _emailkit_dispatcher_domain_info() {
  return array(
    '#identifier' => '#name',
    '#defaults' => array(
      '#label' => t('(Unlabeled)'),
      '#destinations' => array(),
    ),
  );
}

/**
 * Returns information about all available message types or just about the given message type.
 *
 * @param $id The id of the message type to return information about, or NULL to return information about all message types.
 *
 * @return If an id was given, a structured message type array or NULL if no such message type exists. Otherwise, an array of message type information keyed by message id.
 */
function emailkit_message_info($id = NULL, $reset = FALSE) {
  module_load_include('inc', 'emailkit', 'emailkit');
  
  return _emailkit_entity_info('message', $id, $reset);
}

/**
 * Private function used by _emailkit_entity_info that provides default values for message types.
 */
function _emailkit_message_domain_info() {
  return array(
    '#identifier' => '#id',
    '#defaults' => array(
      '#label' => t('(Unlabeled)'),
    ),
  );
}

/**
 * Returns a structured message array for the given message id.
 *
 * @param $message_id The message id.
 * @param ... Any additional arguments that will be passed into hook_message().
 *
 * @return A structured message array.
 */
function emailkit_message($message_id) {
  if (!isset($message_id)) {
    return NULL;
  }
  
  module_load_include('inc', 'emailkit', 'emailkit');
  
  // Pass on the message
  $args = func_get_args();
  return call_user_func_array('_emailkit_message', $args);
}

/**
 * Renders the body of the given message in the given format.
 *
 * @param $message A structured message as returned by emailkit_message().
 * @param $format The format to render the message in. Can be EMAILKIT_MESSAGE_FORMAT_HTML or EMAILKIT_MESSAGE_FORMAT_TEXT.
 * @param $destination The destination the message is about to be sent to, if applicable. This will be passed along to hook_emailkit_message_render().
 *
 * @return A string containing the message rendered in the given format with LF line endings.
 */
function emailkit_message_render($message, $format, &$destination = NULL) {
  if (!isset($message)) {
    return NULL;
  }
  
  module_load_include('inc', 'emailkit', 'emailkit');
  
  // Pass on the message
  return _emailkit_message_render($message, $format, $destination);
}

/**
 * Returns the name of the dispatcher that services the given message and destination.
 *
 * @return The name of a dispatcher.
 */
function emailkit_message_dispatcher($message_id, $destination_type) {
  if (!isset($message_id) || !isset($destination_type)) {
    return NULL;
  }
  
  // Get information about the destination type
  $destination_info = emailkit_destination_info($destination_type);
  if (!isset($destination_info)) {
    return NULL;
  }
  
  $key = _emailkit_message_dispatcher_variable($message_id, $destination_type);
  $default = $destination_info['#default_dispatcher'];
  
  return variable_get($key, $default);
}

/**
 * Private function that returns the name of the variable that stores the dispatcher for the given message and destination.
 */
function _emailkit_message_dispatcher_variable($message_id, $destination_type) {
  return 'emailkit__' . $message_id . '__' . $destination_type . '__dispatcher';
}

/**
 * Sends the given message to the given destination.
 *
 * @param $message A structured message array.
 * @param $destination A structured destination array, that must have at least its #type set.
 *
 * @return A flag indicating whether sending was successful.
 */
function emailkit_send($message, $destination) {
  if (!is_array($message)) {
    trigger_error(sprintf('Message is not an array.'), E_USER_ERROR);
    return FALSE;
  }
  
  if (!is_array($destination) || !isset($destination['#type'])) {
    trigger_error(sprintf('Destination is not an array or does not have a #type.'), E_USER_ERROR);
    return FALSE;
  }
  
  // Find a dispatcher for this destination
  $dispatcher_name = emailkit_message_dispatcher($message['#id'], $destination['#type']);
  if (!isset($dispatcher_name)) {
    return FALSE;
  }
  
  module_load_include('inc', 'emailkit', 'emailkit');
  
  // Find the send function for that dispatcher
  $dispatcher_send = _emailkit_entity_identifier_hook('dispatcher', $dispatcher_name, 'dispatcher_send');
  if (!isset($dispatcher_send)) {
    return FALSE;
  }

  // Set the message sending recursion depth
  $message['#sending_depth'] = isset($message['#sending_depth']) ? $message['#sending_depth'] + 1 : 0;

  // Give all modules a last chance to alter the message now that we know the destination
  foreach (module_implements('emailkit_message_before_send') as $module) {
    $function = $module . '_emailkit_message_before_send';
    $function($message, $destination);
  }

  $success = $dispatcher_send($dispatcher_name, $message, $destination);
  
  // Give all modules a last chance to alter the message now that we know the destination
  foreach (module_implements('emailkit_message_after_send') as $module) {
    $function = $module . '_emailkit_message_after_send';
    $function($message, $destination, $success);
  }
  
  return $success;
}

/**
 * Sends the given message to the destination given by the emailkit_destination_select element value.
 *
 * @param $element_value The value of an emailkit_destination_select element.
 */
function emailkit_destination_select_send($message, $element_value) {
  // Check whether we have a destination type
  if (!isset($element_value['destination_type'])) {
    return FALSE;
  }  
  $destination_type = $element_value['destination_type'];
  
  module_load_include('inc', 'emailkit', 'emailkit');
  
  // Start constructing a structured destination array
  $destination = array(
    '#type' => $destination_type,
  );

  // Allow the destination_form_submit hook to dress up the structured destination array
  $form_values = isset($element_value['destination_form'][$destination_type]) ? $element_value['destination_form'][$destination_type] : array();
  if ($destination_form_submit = _emailkit_entity_identifier_hook('destination', $destination_type, 'destination_form_submit')) {
    $destination_form_submit(&$destination, $form_values);
  }
  
  // Finally, pass the stick to emailkit_send
  return emailkit_send($message, $destination);
}

/**
 * Private helper function that will include the appropriate file and pass on the message.
 */
function _emailkit_destination_select_process($element) {
  module_load_include('inc', 'emailkit', 'emailkit.destination_select');
  
  return emailkit_destination_select_process($element);
}

/**
 * Private helper function that will include the appropriate file and pass on the message.
 */
function _emailkit_destination_select_after_build($element) {
  module_load_include('inc', 'emailkit', 'emailkit.destination_select');
  
  return emailkit_destination_select_after_build($element);
}

/**
 * Private helper function that calculates the total column span of a given table header or row, so that this doesn't have to be hardcoded when adding rows that span the whole table width.
 */
function _emailkit_table_colspan($row_or_header) {
  $colspan = 0;
  
  // Check whether this is a row with additional attributes, in which case we need to look at the data attribute
  if (isset($row_or_header['data'])) {
    $cells = $row_or_header['data'];
  }
  else {
    $cells = $row_or_header;
  }

  foreach ($cells as $cell) {
    // If the cell has an explicit column span, add that
    if (is_array($cell) && isset($cell['colspan'])) {
      $colspan += $cell['colspan'];
    }
    // Otherwise, just add 1
    else {
      $colspan++;
    }
  }
  
  return $colspan;
}
