<?php
// Developed by Dennis Stevense for Digital Deployment

/**
 * Implementation of hook_perm().
 */
function emailkit_perm() {
  $perm = array();

  $perm[] = 'administer e-mail kit';
  
  return $perm;
}

/**
 * Implementation of hook_menu().
 */
function emailkit_menu() {
  $items = array();

  $items['admin/emailkit'] = array(
    'title' => 'E-mail kit',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer e-mail kit'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  
  return $items;
}

/**
 * Implementation of hook_elements().
 */
function emailkit_elements() {
  $elements = array();
  
  $elements['emailkit_destination_select'] = array(
    '#input' => TRUE,
    '#process' => array('_emailkit_destination_select_process'),
    '#after_build' => array('_emailkit_destination_select_after_build'),
  );
  
  return $elements;
}

/**
 * Implementation of hook_theme().
 */
function emailkit_theme() {
  $theme = array();
  
  $theme['emailkit_destination_select'] = array(
    'arguments' => array(
      'element' => array(),
    ),
    'file' => 'emailkit.destination_select.inc',
  );
  $theme['emailkit_destination_select_children'] = array(
    'arguments' => array(
      'element' => array(),
    ),
    'file' => 'emailkit.destination_select.inc',
  );
  
  return $theme;
}

/**
 * Implementation of hook_emailkit_destination_info().
 */
function emailkit_emailkit_destination_info() {
  $destinations = array();
  
  // Generic destination type
  $info['emailkit_default'] = array(
    'label' => t('Generic e-mail destination'),
  );
  
  // Single e-mail address destination type
  $info['emailkit_address'] = array(
    'label' => t('E-mail address'),
    'exposed' => TRUE,
    'file' => 'emailkit.address.inc',
  );
  
  return $info;
}

/**
 * Implementation of emailkit_emailkit_dispatcher_info().
 */
function emailkit_emailkit_dispatcher_info() {
  $info = array();
  
  // Default message dispatcher which services the default destination type
  $info['emailkit_default'] = array(
    'label' => t('Drupal'),
    'destinations' => array('emailkit_default'),
    'file' => 'emailkit.default.inc',
  );
  
  // Dispatcher which services textual e-mail addresses, by forwarding them to the default message dispatcher
  $info['emailkit_address'] = array(
    'label' => t('Readdress as generic e-mail destination'),
    'destinations' => array('emailkit_address'),
    'file' => 'emailkit.address.inc',
  );
  
  return $info;
}

/**
 * Returns all available destinations.
 *
 * @return An array of destination information keyed by destination name.
 *
 * @see hook_emailkit_destination_info()
 */
function emailkit_destination_info($reset = FALSE) {
  static $info = NULL;
  
  // Do we need to (re)load the cache?
  if (!isset($info) || $reset) {
    $info = array();
    
    // Invoke hook_emailkit_destination_info() on all modules that implement it
    foreach (module_implements('emailkit_destination_info') as $module) {
      $module_info = call_user_func($module . '_emailkit_destination_info');
      
      foreach ($module_info as $destination_name => $destination_info) {
        // Set defaults
        $destination_info += array(
          'label' => t('(Unlabeled)'),
          'exposed' => FALSE,
          'file' => NULL,
          'base' => $destination_name,
        );

        // Determine the full path to the include file, if necessary
        if (isset($destination_info['file'])) {
          $destination_info['include file'] = drupal_get_path('module', $module) . '/' . $destination_info['file'];
        }
        
        $info[$destination_name] = $destination_info;
      }
    }
  }

  return $info;
}

/**
 * Invokes the given hook for the given destination.
 *
 * @param $hook A string indicating the name of the hook, excluding the 'destination' prefix. Example: form_validate
 * @param $destination A string indicating the name of the destination.
 *
 * @return Whatever is returned by the hook, or NULL if the hook is not implemented.
 */
function _emailkit_destination_invoke($hook, $destination) {
  $info = emailkit_destination_info();
  if (!isset($info[$destination])) {
    trigger_error(sprintf('Destination does not exist: %s', $destination), E_USER_ERROR);
    return NULL;
  }
  
  $destination_info = $info[$destination];

  // Load the include file, if necessary
  if (isset($destination_info['include file'])) {
    require_once($destination_info['include file']);
  }

  // Call the function, if it exists
  $function = $destination_info['base'] . '_destination_' . $hook;
  if (function_exists($function)) {
    // Pass on all arguments, except the $hook argument
    $args = func_get_args();
    array_shift($args);
    
    return call_user_func_array($function, $args);
  }
  else {
    return NULL;
  }
}

/**
 * Returns the form for the given exposed destination.
 *
 * @param $destination A string indicating the name of the destination.
 *
 * @return A form array, or NULL if the destination has no form or is not exposed.
 */
function emailkit_destination_form($destination) {
  $info = emailkit_destination_info();
  if (!isset($info[$destination])) {
    trigger_error(sprintf('Destination does not exist: %s', $destination), E_USER_ERROR);
    return NULL;
  }
  
  $destination_info = $info[$destination];
    
  if ($destination_info['exposed']) {
    $form = _emailkit_destination_invoke('form', $destination);
  }
  else {
    $form = NULL;
  }

  if (isset($form)) {
    // Set #destination if it hasn't been set
    if (!isset($form['#destination'])) {
      $form['#destination'] = $destination;
    }
    
    // Install the default validation handler if it hasn't been set already
    if (!isset($form['#element_validate'])) {
      $form['#element_validate'] = array($destination_info['base'] . '_destination_form_validate');
    }
  }
  
  return $form;
}

/**
 * Finds and returns the name of the dispatcher for the destination with the given name.
 */
function emailkit_destination_dispatcher($destination) {
  $result = NULL;
  
  // Find the first dispatcher that services this destination
  // TODO: Allow the user to configure the dispatcher if there is more than one for a destination
  $dispatchers = emailkit_dispatcher_info();
  foreach ($dispatchers as $dispatcher => $dispatcher_info) {
    if (in_array($destination, $dispatcher_info['destinations'])) {
      $result = $dispatcher;
      break;
    }
  }
  
  return $result;
}

/**
 * Returns all available dispatchers.
 *
 * @return An array of dispatcher information keyed by dispatcher name.
 *
 * @see hook_emailkit_dispatcher_info()
 */
function emailkit_dispatcher_info($reset = FALSE) {
  static $info = NULL;
  
  // Do we need to (re)load the cache?
  if (!isset($info) || $reset) {
    $info = array();
    
    // Invoke hook_emailkit_dispatcher_info() on all modules that implement it
    foreach (module_implements('emailkit_dispatcher_info') as $module) {
      $module_info = call_user_func($module . '_emailkit_dispatcher_info');
      
      foreach ($module_info as $dispatcher_name => $dispatcher_info) {
        // Set defaults
        $dispatcher_info += array(
          'label' => t('(Unlabeled)'),
          'destinations' => array(),
          'file' => NULL,
          'base' => $dispatcher_name,
        );

        // Determine the full path to the include file, if necessary
        if (isset($dispatcher_info['file'])) {
          $dispatcher_info['include file'] = drupal_get_path('module', $module) . '/' . $dispatcher_info['file'];
        }
        
        $info[$dispatcher_name] = $dispatcher_info;
      }
    }
  }

  return $info;
}

/**
 * Invokes the given hook for the given dispatcher.
 *
 * @param $hook A string indicating the name of the hook, excluding the 'dispatcher' prefix. Example: send
 * @param $dispatcher A string indicating the name of the dispatcher.
 *
 * @return Whatever is returned by the hook, or NULL if the hook is not implemented.
 */
function _emailkit_dispatcher_invoke($hook, $dispatcher) {
  $info = emailkit_dispatcher_info();
  if (!isset($info[$dispatcher])) {
    trigger_error(sprintf('Dispatcher does not exist: %s', $dispatcher), E_USER_ERROR);
    return NULL;
  }
  
  $dispatcher_info = $info[$dispatcher];

  // Load the include file, if necessary
  if (isset($dispatcher_info['include file'])) {
    require_once($dispatcher_info['include file']);
  }

  // Call the function, if it exists
  $function = $dispatcher_info['base'] . '_dispatcher_' . $hook;
  if (function_exists($function)) {
    // Pass on all arguments, except the $hook argument
    $args = func_get_args();
    array_shift($args);
    
    return call_user_func_array($function, $args);
  }
  else {
    return NULL;
  }
}

/**
 * Sends the given message to the given destination.
 */
function emailkit_send($message, $destination, $destination_options) {
  // Find dispatcher
  $dispatcher = emailkit_destination_dispatcher($destination);
  if (!isset($dispatcher)) {
    trigger_error(sprintf('No dispatcher for destination: %s', $destination), E_USER_ERROR);
    return NULL;
  }
  
  _emailkit_dispatcher_invoke('send', $dispatcher, $message, $destination, $destination_options);
}

/**
 * Sends the given message to the destination given by the emailkit_destination_select element value.
 *
 * @param $element_value The value of an emailkit_destination_select element.
 */
function emailkit_destination_select_send($message, $element_value) {
  if (isset($element_value['destination'])) {
    $destination = $element_value['destination'];
    $form_values = isset($element_value['destination_form'][$destination]) ? $element_value['destination_form'][$destination] : NULL;
    
    $destination_options = _emailkit_destination_invoke('form_submit', $destination, $form_values);
    if (!isset($destination_options)) {
      $destination_options = $form_values;
    }
    
    return emailkit_send($message, $destination, $destination_options);
  }
  else {
    return FALSE;
  }
}

/**
 * Private helper function that will include the appropriate file and pass on the message.
 */
function _emailkit_destination_select_process($element) {
  module_load_include('inc', 'emailkit', 'emailkit.destination_select');
  
  return emailkit_destination_select_process($element);
}

/**
 * Private helper function that will include the appropriate file and pass on the message.
 */
function _emailkit_destination_select_after_build($element) {
  module_load_include('inc', 'emailkit', 'emailkit.destination_select');
  
  return emailkit_destination_select_after_build($element);
}

/**
 * Private helper function that marks the given element and all its children as validated.
 */
function _emailkit_element_set_validated(&$element) {
  $element['#validated'] = TRUE;
  
  // Recurse
  foreach (element_children($element) as $key) {
    _emailkit_element_set_validated($element[$key]);
  }
}
