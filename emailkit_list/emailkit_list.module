<?php
// Developed by Dennis Stevense for Digital Deployment

/**
 * Implementation of hook_perm().
 */
function emailkit_list_perm() {
  $perm = array();
  
  // Permission for adding, editing and deleting e-mail lists
  $perm[] = 'administer e-mail lists';
  
  // Permissions for adding, editing and deleting subscribers
  $perm[] = 'administer subscribers';
  
  // Permissions for regular users
  $perm[] = 'edit own subscriptions';
  
  return $perm;
}

/**
 * Implementation of hook_menu().
 */
function emailkit_list_menu() {
  $items = array();
  
  // Menu items for adding, editing and deleting e-mail lists
  $items['admin/emailkit/list/lists'] = array(
    'title' => 'Lists',
    'description' => 'Manage the e-mail lists that users can subscribe to.',
    'page callback' => 'emailkit_list_admin_list',
    'access arguments' => array('administer e-mail lists'),
    'file' => 'emailkit_list.admin.inc',
  );
  $items['admin/emailkit/list/lists/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/emailkit/list/lists/add'] = array(
    'title' => 'Add list',
    'page callback' => 'emailkit_list_admin_add',
    'access arguments' => array('administer e-mail lists'),
    'file' => 'emailkit_list.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/emailkit/list/lists/%emailkit_list/edit'] = array(
    'title' => 'Edit list',
    'page callback' => 'emailkit_list_admin_edit',
    'page arguments' => array(4),
    'access arguments' => array('administer e-mail lists'),
    'file' => 'emailkit_list.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/emailkit/list/lists/%emailkit_list/delete'] = array(
    'title' => 'Delete list',
    'page callback' => 'emailkit_list_admin_delete',
    'page arguments' => array(4),
    'access arguments' => array('administer e-mail lists'),
    'file' => 'emailkit_list.admin.inc',
    'type' => MENU_CALLBACK,
  );
  
  // Menu items for adding, editing and deleting subscribers
  $items['admin/emailkit/list/subscribers'] = array(
    'title' => 'Subscribers',
    'description' => 'Manage subscribers.',
    'page callback' => 'emailkit_list_admin_subscriber_list',
    'access arguments' => array('administer subscribers'),
    'file' => 'emailkit_list.admin.inc',
  );
  $items['admin/emailkit/list/subscribers/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/emailkit/list/subscribers/add'] = array(
    'title' => 'Add subscriber',
    'page callback' => 'emailkit_list_admin_subscriber_add',
    'access arguments' => array('administer subscribers'),
    'file' => 'emailkit_list.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/emailkit/list/subscribers/%emailkit_list_subscriber/edit'] = array(
    'title' => 'Edit subscriber',
    'page callback' => 'emailkit_list_admin_subscriber_edit',
    'page arguments' => array(4),
    'access arguments' => array('administer subscribers'),
    'file' => 'emailkit_list.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/emailkit/list/subscribers/%emailkit_list_subscriber/delete'] = array(
    'title' => 'Delete subscriber',
    'page callback' => 'emailkit_list_admin_subscriber_delete',
    'page arguments' => array(4),
    'access arguments' => array('administer subscribers'),
    'file' => 'emailkit_list.admin.inc',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function emailkit_list_theme() {
  $theme = array();
  
  // Theming for the e-mail lists admin form
  $theme['emailkit_list_admin_list_form'] = array(
    'arguments' => array(
      'form' => array(),
    ),
    'file' => 'emailkit_list.admin.inc',
  );
  
  // Theming for the subscribers admin form
  $theme['emailkit_list_admin_subscriber_list_form'] = array(
    'arguments' => array(
      'form' => array(),
    ),
    'file' => 'emailkit_list.admin.inc',
  );
  
  return $theme;
}

/**
 * Implementation of hook_user().
 */
function emailkit_list_user($op, &$edit, &$account, $category = NULL) {
  if (!(user_access('edit own subscriptions') || user_access('administer subscriptions'))) {
    return;
  }
  
  module_load_include('inc', 'emailkit_list', 'emailkit_list.user');
  
  switch ($op) {
    case 'form':
      return emailkit_list_user_form($account);
      
    case 'update':
      return emailkit_list_user_form_submit($account, $edit);
  }
}

/**
 * Implementation of hook_emailkit_destination_info().
 */
function emailkit_list_emailkit_destination_info() {
  $info = array();

  $info['emailkit_list'] = array(
    '#label' => t('E-mail list'),
    '#exposed' => TRUE,
    '#file' => 'emailkit_list.inc',
  );
  
  return $info;
}

/**
 * Implementation of emailkit_emailkit_dispatcher_info().
 */
function emailkit_list_emailkit_dispatcher_info() {
  $info = array();

  $info['emailkit_list'] = array(
    '#name' => t('Readdress as a generic e-mail destination'),
    '#destinations' => array('emailkit_list'),
    '#file' => 'emailkit_list.inc',
  );
  
  return $info;
}

/**
 * Loads the list with the given identifier from the database.
 *
* @return A list, or NULL if it cannot be found.
 */
function emailkit_list_load($lid) {
  return db_fetch_object(db_query("SELECT * FROM {emailkit_list} WHERE lid = %d", $lid));
}

/**
 * Loads all lists from the database.
 *
 * @return An array of lists, keyed by their identifier and ordered by weight and name.
 */
function emailkit_list_load_all() {
  $lists = array();
  
  $result = db_query("SELECT * FROM {emailkit_list} ORDER BY weight ASC, name ASC");
  while ($list = db_fetch_object($result)) {
    $lists[$list->lid] = $list;
  }
  
  return $lists;
}

/**
 * Saves the given list to the database, inserting a new record or updating an existing record as necessary.
 *
 * @return Returns FALSE, SAVED_NEW or SAVED_UPDATED depending on whether saving was successful. Upon return, a new list will automatically have an identifier assigned to it.
 */
function emailkit_list_save(&$list) {
  if (isset($list->lid)) {
    db_query("UPDATE {emailkit_list} SET name = '%s', weight = %d WHERE lid = %d", $list->name, $list->weight, $list->lid);
    
    if (db_affected_rows() == 1) {
      return SAVED_UPDATED;
    }
    else {
      return FALSE;
    }
  }
  else {
    db_query("INSERT INTO {emailkit_list} (name, weight) VALUES ('%s', %d)", $list->name, $list->weight);

    if (db_affected_rows() == 1) {
      $list->lid = db_last_insert_id('emailkit_list', 'lid');
      
      return SAVED_NEW;
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Deletes the list with the given identifier from the database.
 *
 * @return A flag indicating whether the list was deleted.
 */
function emailkit_list_delete($lid) {
  db_query("DELETE FROM {emailkit_list} WHERE lid = %d", $lid);
  
  if (db_affected_rows() == 1) {
    db_query("DELETE FROM {emailkit_list_subscription} WHERE lid = %d", $lid);
    
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Loads the subscriber with the given identifier from the database.
 */
function emailkit_list_subscriber_load($sid) {
  return db_fetch_object(db_query("SELECT * FROM {emailkit_list_subscriber} WHERE sid = %d", $sid));
}

/**
 * Loads the subscriber with the given address from the database.
 */
function emailkit_list_subscriber_load_by_address($address) {
  return db_fetch_object(db_query("SELECT * FROM {emailkit_list_subscriber} WHERE address = '%s'", $address));
}

/**
 * Loads the subscriber with the given user identifier from the database.
 */
function emailkit_list_subscriber_load_by_user($uid) {
  return db_fetch_object(db_query("SELECT * FROM {emailkit_list_subscriber} WHERE uid = %d", $uid));
}

/**
 * Loads all subscribers from the database.
 *
 * @return An array of subscribers, keyed and ordered by their unique identifier.
 */
function emailkit_list_subscriber_load_all($tablesort_header = NULL, $pager_limit = NULL, $pager_element = 0) {
  $subscribers = array();
  
  // Build the SQL query
  $sql = "SELECT * FROM {emailkit_list_subscriber}";
  if (isset($tablesort_header)) {
    $sql .= tablesort_sql($tablesort_header);
  }
  else {
    $sql .= " ORDER BY sid ASC";
  }

  // Run the SQL query
  if (isset($pager_limit) && isset($pager_element)) {
    $result = pager_query($sql, $pager_limit, $pager_element);
  }
  else {
    $result = db_query($sql);
  }
  
  while ($subscriber = db_fetch_object($result)) {
    $subscribers[$subscriber->sid] = $subscriber;
  }
  
  return $subscribers;
}

/**
 * Loads the subscriptions of the given subscriber.
 *
 * @param $sid The identifier of the subscriber.
 *
 * @return An array of list identifiers.
 */
function emailkit_list_subscriber_load_subscriptions($sid) {
  $lids = array();
  
  $result = db_query("SELECT lid FROM {emailkit_list_subscription} WHERE sid = %d", $sid);
  while ($lid = db_result($result)) {
    $lids[] = $lid;
  }
  
  return $lids;
}

/**
 * Saves the given subscriber to the database, inserting a new record or updating an existing record as necessary.
 *
 * @return Returns FALSE, SAVED_NEW or SAVED_UPDATED depending on whether saving was successful. Upon return, a new subscriber will automatically have an identifier assigned to it.
 */
function emailkit_list_subscriber_save(&$subscriber) {
  if (isset($subscriber->sid)) {
    db_query("UPDATE {emailkit_list_subscriber} SET address = '%s', uid = %d WHERE sid = %d", $subscriber->address, $subscriber->uid, $subscriber->sid);
    
    if (db_affected_rows() == 1) {
      return SAVED_UPDATED;
    }
    else {
      return FALSE;
    }
  }
  else {
    db_query("INSERT INTO {emailkit_list_subscriber} (address, uid) VALUES ('%s', %d)", $subscriber->address, $subscriber->uid);

    if (db_affected_rows() == 1) {
      $subscriber->sid = db_last_insert_id('emailkit_list_subscriber', 'sid');
      
      return SAVED_NEW;
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Saves the subscriptions of the given subscriber. 
 *
 * @param $sid The identifier of the subscriber.
 * @param $lids An array of list identifiers.
 *
 * @return A flag indicating whether saving was successful.
 */
function emailkit_list_subscriber_save_subscriptions($sid, $lids) {
  db_query("DELETE FROM {emailkit_list_subscription} WHERE sid = %d", $sid);
  
  if (!empty($lids)) {
    // Start constructing a compound insertion statement
    $sql = "INSERT INTO {emailkit_list_subscription} (sid, lid) VALUES ";
    $sql_args = array();
    $insertions = 0;
    
    foreach ($lids as $lid) {
      $sql .= "(%d, %d), ";
      $sql_args[] = $sid;
      $sql_args[] = $lid;
      $insertions++;
    }
    
    // Remove the final comma delimiter
    $sql = substr($sql, 0, -2);
    
    db_query($sql, $sql_args);
    
    // Verify the number of affected rows
    if (db_affected_rows() == $insertions) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    return TRUE;
  }
}

/**
 * Deletes the subscriber with the given identifier from the database.
 *
 * @return A flag indicating whether the subscriber was deleted.
 */
function emailkit_list_subscriber_delete($sid) {
  db_query("DELETE FROM {emailkit_list_subscriber} WHERE sid = %d", $sid);
  
  if (db_affected_rows() == 1) {
    db_query("DELETE FROM {emailkit_list_subscription} WHERE sid = %d", $sid);
    
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Private function that adds a class to a form element.
 */
function _emailkit_list_element_add_class(&$element, $class) {
  // Make sure we have an attributes array
  if (!isset($element['#attributes'])) {
    $element['#attributes'] = array();
  }
  
  // Make sure we have a class attribute
  if (!isset($element['#attributes']['class'])) {
    $element['#attributes']['class'] = '';
  }
  else {
    $element['#attributes']['class'] .= ' ';
  }
  
  $element['#attributes']['class'] .= $class;
}
