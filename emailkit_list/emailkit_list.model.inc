<?php
// Developed by Dennis Stevense for Digital Deployment

/**
 * Defines a subscriber that can subscribe to any number of e-mail lists. A subscriber has an e-mail address and may or may not be associated with a user account.
 */
class EmailkitListSubscriber {

  // These correspond to the fields in the emailkit_list_subscriber table
  private $sid;
  private $address;
  private $uid = 0;
  
  // These are used for caching subscription list IDs for getting (saved) and setting (unsaved)
  private $saved_lids;
  private $unsaved_lids;

  /**
   * Creates a new subscriber with the given address and user ID.
   *
   * @param $address The e-mail address of the subscriber.
   * @param $uid The user ID or 0 if this subscriber is anonymous. (optional)
   *
   * @return A subscriber
   */
  public function __construct($address, $uid = 0) {
    $this->setAddress($address);
    $this->setUserID($uid);
  }
  
  /**
   * Creates and returns a subscriber with the given database record.
   *
   * @param $record The record containing all parameters of the subscriber.
   *
   * @return A subscriber.
   */
  protected static function subscriberWithRecord($record) {
    $list = new EmailkitListSubscriber($record->address, $record->uid);
    $list->setId($record->sid);
    return $list;
  }

  /**
   * Returns a flag indicating whether this subscriber does not exist in the database yet.
   */
  public function isNew() {
    return $this->getId() == NULL;
  }

  /**
   * Returns the unique identifier of this subscriber.
   */
  public function getId() {
    return $this->sid;
  }

  /**
   * Sets the unique identifier of this subscriber.
   */
  private function setId($sid) {
    if ($sid != NULL && !is_numeric($sid)) {
      trigger_error(sprintf("Subscriber identifier must be NULL or a number: %d", $sid), E_USER_ERROR);
      return;
    }
    
    $this->sid = $sid;
  }

  /**
   * Returns the e-mail address of this subscriber.
   */
  public function getAddress() {
    return $this->address;
  }

  /**
   * Sets the e-mail address of this subscriber.
   */
  public function setAddress($address) {
    if (!valid_email_address($address)) {
      trigger_error(sprintf("Subscriber address must be a valid e-mail address: %s", $address), E_USER_ERROR);
      return;
    }
    
    $this->address = $address;
  }

  /**
   * Returns the user ID of this subscriber.
   */
  public function getUserId() {
    return $this->uid;
  }

  /**
   * Sets the user ID of this subscriber.
   */
  public function setUserId($uid) {
    if (!is_numeric($uid)) {
      trigger_error(sprintf("Subscriber user ID must be a number: %d", $uid), E_USER_ERROR);
      return;
    }
    
    $this->uid = $uid;
  }

  /**
   * Returns the user of this subscribert, or NULL if this subscriber has no user ID.
   */
  public function getUser() {
    if ($this->getUserId() == 0) {
      return NULL;
    }

    $user = user_load($this->getUserId());
    if ($user !== FALSE) {
      return $user;
    }
    else {
      return NULL;
    }
  }
  
  /**
   * Returns the subscription list IDs of this subscriber.
   */
  public function getSubscriptionListIds() {
    // Try to use a previously set value
    if (isset($this->unsaved_lids)) {
      return $this->unsaved_lids;
    }
    // Try to use a previously fetched value
    else if (isset($this->saved_lids)) {
      return $this->saved_lids;
    }
    // Fetch the value from the database
    else {
      $this->saved_lids = array();

      if (!$this->isNew()) {
        $result = db_query("SELECT lid FROM {emailkit_list_subscription} WHERE sid = %d", $this->getId());
        while ($lid = db_result($result)) {
          $this->saved_lids[] = $lid;
        }
      }
      
      return $this->saved_lids;
    }
  }
  
  /**
   * Sets the subscription list IDs of this subscriber.
   */
  public function setSubscriptionListIds($lids) {
    if (!is_array($lids)) {
      trigger_error(sprintf("Subscriber list IDs must be an array"), E_USER_ERROR);
      return;
    }

    if ($this->unsaved_lids !== $lids) {
      $this->unsaved_lids = $lids;
    }
  }
  
  /**
   * Returns a flag indicating whether the subscription list IDs of this subscriber need to be saved to the database.
   */
  protected function isSubscriptionListIdsSaved() {
    return !isset($this->unsaved_lids);
  }
  
  /**
   * Called when the subscription list IDs have been saved to the database.
   */
  protected function setSubscriptionListIdsSaved() {
    $this->saved_lids = $this->unsaved_lids;
    $this->unsaved_lids = NULL;
  }
  
  /**
   * Loads all subscribers from the database.
   *
   * @return An array of subscribers, keyed and ordered by their unique identifier.
   */
  public static function loadAll($tablesort_header = NULL, $pager_limit = NULL, $pager_element = 0) {
    $subscribers = array();
    
    // Build the SQL query
    $sql = "SELECT * FROM {emailkit_list_subscriber}";
    if (isset($tablesort_header)) {
      $sql .= tablesort_sql($tablesort_header);
    }
    else {
      $sql .= " ORDER BY sid ASC";
    }

    // Run the SQL query
    if (isset($pager_limit) && isset($pager_element)) {
      $result = pager_query($sql, $pager_limit, $pager_element);
    }
    else {
      $result = db_query($sql);
    }
    
    while ($record = db_fetch_object($result)) {
      $subscriber = EmailkitListSubscriber::subscriberWithRecord($record);
      $subscribers[$subscriber->getId()] = $subscriber;
    }
    
    return $subscribers;
  }

  /**
   * Load the subscriber with the given identifier from the database.
   *
   * @return A subscriber, or NULL if it cannot be found.
   */
  public static function loadWithId($sid) {
    if (!is_numeric($sid)) {
      trigger_error(sprintf("Subscriber identifier must be a number: %d", $sid), E_USER_ERROR);
      return;
    }

    $result = db_query("SELECT * FROM {emailkit_list_subscriber} WHERE sid = %d", $sid);
    if ($record = db_fetch_object($result)) {
      return EmailkitListSubscriber::subscriberWithRecord($record);
    }
    else {
      return NULL;
    }
  }
  
  /**
   * Load the subscriber associated with the given e-mail address from the database.
   *
   * @param $address A non-empty string.
   *
   * @return A subscriber, or NULL if it cannot be found.
   */
  public static function loadWithAddress($address) {
    if (!is_string($address) || empty($address)) {
      trigger_error(sprintf("E-mail address must be a non-empty string: %s", $address), E_USER_ERROR);
      return;
    }

    $result = db_query("SELECT * FROM {emailkit_list_subscriber} WHERE address = '%s'", $address);
    if ($record = db_fetch_object($result)) {
      return EmailkitListSubscriber::subscriberWithRecord($record);
    }
    else {
      return NULL;
    }
  }
  
  /**
   * Load the subscriber associated with the given user ID from the database.
   *
   * @param $uid A user ID, which must be strictly positive.
   *
   * @return A subscriber, or NULL if it cannot be found.
   */
  public static function loadWithUserId($uid) {
    if (!is_numeric($uid) || $uid <= 0) {
      trigger_error(sprintf("User identifier must be a strictly positive number: %d", $uid), E_USER_ERROR);
      return;
    }

    $result = db_query("SELECT * FROM {emailkit_list_subscriber} WHERE uid = %d", $uid);
    if ($record = db_fetch_object($result)) {
      return EmailkitListSubscriber::subscriberWithRecord($record);
    }
    else {
      return NULL;
    }
  }
  
  /**
   * Deletes the subscriber with the given identifier from the database.
   *
   * @return A flag indicating whether the subscriber was deleted.
   */
  public static function deleteWithId($sid) {
    if (!is_numeric($sid)) {
      trigger_error(sprintf("Subscriber identifier must be a number: %d", $sid), E_USER_ERROR);
      return FALSE;
    }

    db_query("DELETE FROM {emailkit_list_subscription} WHERE sid = %d", $sid);
    db_query("DELETE FROM {emailkit_list_subscriber} WHERE sid = %d", $sid);
    return db_affected_rows() == 1;
  }

  /**
   * Saves this subscriber to the database, inserting a new record or updating an existing record as necessary.
   *
   * @return Returns FALSE, SAVED_NEW or SAVED_UPDATED depending on whether saving was successful.
   */
  public function save() {
    if ($this->isNew()) {
      $result = SAVED_NEW;
      
      db_query("INSERT INTO {emailkit_list_subscriber} (address, uid) VALUES ('%s', %d)", $this->getAddress(), $this->getUserId());
      $this->setId(db_last_insert_id('emailkit_list_subscriber', 'sid'));

      $rows = db_affected_rows();
      if ($rows != 1) {
        trigger_error(sprintf("Number of affected rows should be one: %d", $rows), E_USER_WARNING);
        return FALSE;
      }
    }
    else {
      $result = SAVED_UPDATED;
      
      db_query("UPDATE {emailkit_list_subscriber} SET address = '%s', uid = %d WHERE sid = %d", $this->getAddress(), $this->getUserId(), $this->getId());

      $rows = db_affected_rows();
      if ($rows != 1) {
        trigger_error(sprintf("Number of affected rows should be one: %d", $rows), E_USER_WARNING);
        return FALSE;
      }
    }
    
    // Save the subscriptions, if necessary
    if (!$this->isSubscriptionListIdsSaved()) {
      db_query("DELETE FROM {emailkit_list_subscription} WHERE sid = %d", $this->getId());
      
      $lids = $this->getSubscriptionListIds();
      foreach ($lids as $lid) {
        db_query("INSERT INTO {emailkit_list_subscription} (lid, sid) VALUES (%d, %d)", $lid, $this->getId());
      }
      
      $this->setSubscriptionListIdsSaved();
    }
    
    return $result;
  }

  /**
   * Deletes this subscriber from the database.
   *
   * @return A flag indicating whether the subscriber was deleted.
   */
  public function delete() {
    if (EmailkitListSubscriber::deleteWithId($this->getId())) {
      return TRUE;
    }
    else {
      trigger_error(sprintf("Number of affected rows should be one: %d", $rows), E_USER_WARNING);
      return FALSE;
    }
  }

}
